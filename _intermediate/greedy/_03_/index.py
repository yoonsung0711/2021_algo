# https://www.acmicpc.net/problem/2217

# N(1 ≤ N ≤ 100,000)개의 로프가 있다. 이 로프를 이용하여 이런 저런 물체를 들어올릴 수 있다. 각각의 로프는 그 굵기나 길이가 다르기 때문에 들 수 있는 물체의 중량이 서로 다를 수도 있다.

# 하지만 여러 개의 로프를 병렬로 연결하면 각각의 로프에 걸리는 중량을 나눌 수 있다. k개의 로프를 사용하여 중량이 w인 물체를 들어올릴 때, 각각의 로프에는 모두 고르게 w/k 만큼의 중량이 걸리게 된다.

# 각 로프들에 대한 정보가 주어졌을 때, 이 로프들을 이용하여 들어올릴 수 있는 물체의 최대 중량을 구해내는 프로그램을 작성하시오. 모든 로프를 사용해야 할 필요는 없으며, 임의로 몇 개의 로프를 골라서 사용해도 된다.

# 첫째 줄에 정수 N이 주어진다. 다음 N개의 줄에는 각 로프가 버틸 수 있는 최대 중량이 주어진다. 이 값은 10,000을 넘지 않는 자연수이다.

# 첫째 줄에 답을 출력한다.

# 2
# 10
# 15

# 20
# https://www.acmicpc.net/problem/2217

# N(1 ≤ N ≤ 100,000)개의 로프가 있다. 이 로프를 이용하여 이런 저런 물체를 들어올릴 수 있다. 각각의 로프는 그 굵기나 길이가 다르기 때문에 들 수 있는 물체의 중량이 서로 다를 수도 있다.

# 하지만 여러 개의 로프를 병렬로 연결하면 각각의 로프에 걸리는 중량을 나눌 수 있다. k개의 로프를 사용하여 중량이 w인 물체를 들어올릴 때, 각각의 로프에는 모두 고르게 w/k 만큼의 중량이 걸리게 된다.

# 각 로프들에 대한 정보가 주어졌을 때, 이 로프들을 이용하여 들어올릴 수 있는 물체의 최대 중량을 구해내는 프로그램을 작성하시오. 모든 로프를 사용해야 할 필요는 없으며, 임의로 몇 개의 로프를 골라서 사용해도 된다.

# 첫째 줄에 정수 N이 주어진다. 다음 N개의 줄에는 각 로프가 버틸 수 있는 최대 중량이 주어진다. 이 값은 10,000을 넘지 않는 자연수이다.

# 첫째 줄에 답을 출력한다.

# 2
# 10
# 15

# 20


# 로프를 병렬로 연결하면 각 로프에는 w/k만큼의 동일한 중량이 걸립니다.
# 즉, 가장 작은 무게를 들 수 있는 로프가 들 수 있는 질량 * 병렬 연결 로프 갯수 = 최종 무게
# 가장 무거운 무게를 들 수 있는 로프 부터 내림차순으로 정렬합니다.
# [100, 80, 60, 40, 20] 이 있다고 하면 [1001, 802, 603, 404, 20*5] 합니다.
# 여기서 가장 큰 값이 답입니다.

# def solution():
#     answer = 0
#     arr.sort(reverse=True)
#     for i in range(N):
#         arr[i] = arr[i] * (i + 1)
 
#     return max(arr)
 
 
# N = int(input())
# arr = []
# for _ in range(N):
#     arr.append(int(input()))
 
# print(solution())


# 결국 가장 적은 중량을 들 수 있는 로프가 기준이 된다는 사실을 알아야합니다.
# 적은 중량의 로프를 하나씩 제거해 나가면서 무게를 비교합니다.

# 예를 들어

# 5 6 30, 총 3개의 로프가 있다면
# 3개의 로프 = 15
# 2개의 로프 = 12
# 1개의 로프 = 30
# 따라서 30이 정답이 됩니다.

# import sys

# N = int(input()) # 로프의 개수

# rope = [int(sys.stdin.readline()) for i in range(N)] # 각 로프가 버틸 수 있는 최대 중량

# rope.sort()

# result=0

# for i in range(len(rope)):
#     if result < N * rope[i]:
#         result = N * rope[i]
#         N -= 1
#     else:
#         N -= 1

# print(result)


