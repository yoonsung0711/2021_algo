# https://www.acmicpc.net/problem/2579

# 계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다. <그림 1>과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.



# 10 20 15 25 10 20

# <그림 1>

# 예를 들어 <그림 2>와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.


# <그림 2>

# 계단 오르는 데는 다음과 같은 규칙이 있다.

# 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
# 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
# 마지막 도착 계단은 반드시 밟아야 한다.
# 따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.

# 각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.


# psuedo code

# 마지막 계단은 꼭 밟아야 한다
# 계단은 한 계단 또는 두 계단을 밟을 수 있다는 점

# 6
# 10 20 15 25 10 20

# 거슬러 가기
# 맨 마지막 계단을 밟기 전에 밟을 수 있는 계단
# 한 계단 아래의 계단이거나 (두 계단 아래의 계단을 밟지 않았음)
# 두 계단 아래의 계단임

# 점화식을 도출하기 위한 일반화 과정을 거치면
# 현재 계단을 밟기 위해서는
# 세 계단 아래의 계단을 밟은 뒤 한 계단 아래의 계단을 밟고 현재 계단으로 오거나
# 두 계단 아래의 계단을 밟은 뒤 현재 계단으로 오는 두 가지 경우가 존재함

# 즉 Ai-3 -> Ai - 1 -> Ai 이거나
# Ai-2 -> Ai

# i = 3라면
# A1 -> A3
# A2 -> A3

# 예제에서
# A1 = 10 (arr[0] = 10)
# A2 = 30 (arr[1] = 20)
# A3 = 35 (arr[3] + arr[1] = 15 + 20)
# A4 = 55 (arr[4] + arr[2] + arr[1] = 25 + 20 + 10)
# A5 = 65 (arr[5] + arr[4] + arr[2] + arr[1] = 10 + 25 + 20 + 10)
# A6 = 75 (arr[6] + arr[4] + arr[2] + arr[1] = 20 + 25 + 20 + 10)


def solution(stairs, n): 
  if n == 1:
    print(stairs[1])

  else:
    dp = [0] * (n + 1)
    dp[1] = stairs[1]
    dp[2] = stairs[2] + stairs[1]

    for i in range(3, n + 1):
      dp[i] = max(dp[i - 3] + stairs[i - 1] + stairs[i], dp[i - 2] + stairs[i])

    print(dp[n])


if __name__ == "__main__":
  n = int(input())
  stairs = [0]

  for _ in range(n):
    stairs.append(int(input()))
  
  solution(stairs, n)
